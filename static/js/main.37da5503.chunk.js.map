{"version":3,"sources":["components/Header.js","components/ContactList.js","components/Profile.js","components/Main.js","components/services/fetchData.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","ListItem","userInfo","onClick","index","lastName","firstName","profileImage","src","alt","ContactList","users","length","map","user","key","id","Profile","backHandler","email","phone","address","href","Object","keys","Main","useState","setUsers","useEffect","a","async","fetch","then","data","json","response","fetchUserData","showProfile","setShowProfile","Component","show","EnhancedContactList","props","otherProps","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.37da5503.chunk.js","sourcesContent":["import React from 'react';\nimport './styles/Header.css';\n\nconst Header = () => {\n  return (\n    <header>\n      <div className='container'>\n        <div className='header_title'>People</div>\n      </div>\n    </header>\n  );\n};\n\nexport default Header;\n","import React from 'react';\nimport './styles/ContactList.css';\n\nconst ListItem = ({ userInfo, onClick, index }) => {\n  const { lastName, firstName, profileImage } = userInfo;\n  return (\n    <div className='list_item_wrapper clearfix' onClick={() => onClick(index)}>\n      <img className='list_item_image' src={profileImage} alt='profile_image' />\n      <div className='list_item_info'>\n        <div>{`${firstName} ${lastName}`}</div>\n      </div>\n    </div>\n  );\n};\n\nconst ContactList = ({ users, onClick }) => {\n  return (\n    <div className='contact_list container'>\n      {users.length > 0 &&\n        users.map((user, index) => (\n          <ListItem\n            key={user.id}\n            userInfo={user}\n            onClick={id => onClick(id)}\n            index={index}\n          />\n        ))}\n    </div>\n  );\n};\n\nexport default ContactList;\n","import React from 'react';\nimport './styles/Profile.css';\n\nconst Profile = ({ userInfo, backHandler }) => {\n  const { email, phone, address, lastName, firstName, profileImage } = userInfo;\n  return (\n    <div className='profile_wrapper container'>\n      <img className='profile_image' src={profileImage} alt='profile_image' />\n      <div className='back_button' onClick={backHandler}>\n        Back\n      </div>\n      <div className='profile_info'>\n        <div className='profile_info_title'>Basic Info</div>\n        <div>\n          name\n          <span>{`${firstName} ${lastName}`}</span>\n        </div>\n        <div>\n          email\n          <span>\n            <a href={`mailto:${email}`}>{email}</a>\n          </span>\n        </div>\n        <div>\n          phone\n          <span>\n            <a href={`tel:${phone}`}>{phone}</a>\n          </span>\n        </div>\n      </div>\n      <div className='profile_info'>\n        <div className='profile_info_title'>Address Details</div>\n        {Object.keys(address).map((key, index) => {\n          return (\n            <div key={index}>\n              {key}\n              <span>{address[key]}</span>\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default Profile;\n","import React, { useState, useEffect } from 'react';\nimport Header from './Header';\nimport ContactList from './ContactList';\nimport Profile from './Profile';\nimport { fetchUserData } from './services/fetchData';\nimport './styles/Main.css';\n\nconst withDetail = Component => {\n  return props => {\n    const { showProfile, backHandler, ...otherProps } = props;\n    if (showProfile.show) {\n      return (\n        <Profile\n          userInfo={props.users[showProfile.id]}\n          backHandler={backHandler}\n        />\n      );\n    }\n    return <Component {...otherProps} />;\n  };\n};\n\nconst Main = () => {\n  const [users, setUsers] = useState([]);\n  useEffect(() => {\n    fetchUserData().then(data => {\n      setUsers(data);\n    });\n  }, []);\n\n  const [showProfile, setShowProfile] = useState({});\n\n  useEffect(() => {}, []);\n\n  const backHandler = () => {\n    setShowProfile({ show: false });\n  };\n\n  const handleOnClick = id => {\n    setShowProfile({ show: true, id, backHandler });\n  };\n\n  const EnhancedContactList = withDetail(ContactList);\n\n  return (\n    <div className='Main'>\n      <Header />\n      <EnhancedContactList\n        users={users}\n        onClick={handleOnClick}\n        showProfile={showProfile}\n        backHandler={backHandler}\n      />\n    </div>\n  );\n};\n\nexport default Main;\n","export const url =\n  'https://cors-anywhere.herokuapp.com/https://mock-io.herokuapp.com/users';\n\nexport const fetchUserData = async () => {\n  const response = await fetch(url).then(data => {\n    return data.json();\n  });\n  return response;\n};\n","import React from 'react';\nimport Main from './components/Main';\nimport './components/styles/App.css';\n\nconst App = () => {\n  return (\n    <div className='App'>\n      <Main />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}